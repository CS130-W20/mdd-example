/*
 * generated by Xtext 2.19.0
 */
package navi.generator

import navi.navigationRules.Destination
import navi.navigationRules.Rule
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import navi.navigationRules.Root

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class NavigationRulesGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (root : resource.contents.filter(Root)) {
			fsa.generateFile(root.name + "Rules.java", root.toCode)
		}
	}

	def String toCode(Root root) '''
		import java.util.HashMap;
		import java.util.HashSet;
		import java.util.Map;
		import java.util.Set;
		
		public class «root.name»Rules {
			private Map<String, Set<NaviDestination>> rules = new HashMap<>();
			
			public «root.name»Rules() {
				NaviDestination nv;
				«FOR rule : root?.ruledefs.rules»
					«FOR dest : rule.destinations»
					

					«rule.toCode(dest)»
  				«ENDFOR»
  			«ENDFOR»
			}
			
			protected void store(String rule, NaviDestination dest) {
				Set<NaviDestination> destinations = rules.get(rule);
				if (destinations == null) {
					rules.put(rule, destinations = new HashSet<>());
				}
				destinations.add(dest);
			}
			
			public Map<String, Set<NaviDestination>> getRules() {
				return rules;
			}

			public class NaviDestination {
				protected String action;
				protected String targetClassname;
				protected String targetBundleId;
			}
		}			
	'''

   def String toCode(Rule rule, Destination dest) '''
		nv = new NaviDestination();
		nv.action = "«dest.transition.name»";
		nv.targetClassname = "«dest.target.controllername»";
		nv.targetBundleId = "«dest.target.bundleid»";
		store("«rule.source.name»", nv);
   '''

}
