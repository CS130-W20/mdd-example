/**
 * generated by Xtext 2.19.0
 */
package navi.navigationRules.impl;

import navi.navigationRules.Mappings;
import navi.navigationRules.NavigationRules;
import navi.navigationRules.NavigationRulesPackage;
import navi.navigationRules.Root;
import navi.navigationRules.TransitionDefinitions;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Root</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link navi.navigationRules.impl.RootImpl#getName <em>Name</em>}</li>
 *   <li>{@link navi.navigationRules.impl.RootImpl#getMappingsdefs <em>Mappingsdefs</em>}</li>
 *   <li>{@link navi.navigationRules.impl.RootImpl#getTransitiondefs <em>Transitiondefs</em>}</li>
 *   <li>{@link navi.navigationRules.impl.RootImpl#getRuledefs <em>Ruledefs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RootImpl extends MinimalEObjectImpl.Container implements Root
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getMappingsdefs() <em>Mappingsdefs</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMappingsdefs()
   * @generated
   * @ordered
   */
  protected Mappings mappingsdefs;

  /**
   * The cached value of the '{@link #getTransitiondefs() <em>Transitiondefs</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitiondefs()
   * @generated
   * @ordered
   */
  protected TransitionDefinitions transitiondefs;

  /**
   * The cached value of the '{@link #getRuledefs() <em>Ruledefs</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRuledefs()
   * @generated
   * @ordered
   */
  protected NavigationRules ruledefs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RootImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NavigationRulesPackage.Literals.ROOT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavigationRulesPackage.ROOT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mappings getMappingsdefs()
  {
    return mappingsdefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMappingsdefs(Mappings newMappingsdefs, NotificationChain msgs)
  {
    Mappings oldMappingsdefs = mappingsdefs;
    mappingsdefs = newMappingsdefs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavigationRulesPackage.ROOT__MAPPINGSDEFS, oldMappingsdefs, newMappingsdefs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMappingsdefs(Mappings newMappingsdefs)
  {
    if (newMappingsdefs != mappingsdefs)
    {
      NotificationChain msgs = null;
      if (mappingsdefs != null)
        msgs = ((InternalEObject)mappingsdefs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavigationRulesPackage.ROOT__MAPPINGSDEFS, null, msgs);
      if (newMappingsdefs != null)
        msgs = ((InternalEObject)newMappingsdefs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavigationRulesPackage.ROOT__MAPPINGSDEFS, null, msgs);
      msgs = basicSetMappingsdefs(newMappingsdefs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavigationRulesPackage.ROOT__MAPPINGSDEFS, newMappingsdefs, newMappingsdefs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransitionDefinitions getTransitiondefs()
  {
    return transitiondefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTransitiondefs(TransitionDefinitions newTransitiondefs, NotificationChain msgs)
  {
    TransitionDefinitions oldTransitiondefs = transitiondefs;
    transitiondefs = newTransitiondefs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavigationRulesPackage.ROOT__TRANSITIONDEFS, oldTransitiondefs, newTransitiondefs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransitiondefs(TransitionDefinitions newTransitiondefs)
  {
    if (newTransitiondefs != transitiondefs)
    {
      NotificationChain msgs = null;
      if (transitiondefs != null)
        msgs = ((InternalEObject)transitiondefs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavigationRulesPackage.ROOT__TRANSITIONDEFS, null, msgs);
      if (newTransitiondefs != null)
        msgs = ((InternalEObject)newTransitiondefs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavigationRulesPackage.ROOT__TRANSITIONDEFS, null, msgs);
      msgs = basicSetTransitiondefs(newTransitiondefs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavigationRulesPackage.ROOT__TRANSITIONDEFS, newTransitiondefs, newTransitiondefs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NavigationRules getRuledefs()
  {
    return ruledefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRuledefs(NavigationRules newRuledefs, NotificationChain msgs)
  {
    NavigationRules oldRuledefs = ruledefs;
    ruledefs = newRuledefs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavigationRulesPackage.ROOT__RULEDEFS, oldRuledefs, newRuledefs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRuledefs(NavigationRules newRuledefs)
  {
    if (newRuledefs != ruledefs)
    {
      NotificationChain msgs = null;
      if (ruledefs != null)
        msgs = ((InternalEObject)ruledefs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavigationRulesPackage.ROOT__RULEDEFS, null, msgs);
      if (newRuledefs != null)
        msgs = ((InternalEObject)newRuledefs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavigationRulesPackage.ROOT__RULEDEFS, null, msgs);
      msgs = basicSetRuledefs(newRuledefs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavigationRulesPackage.ROOT__RULEDEFS, newRuledefs, newRuledefs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NavigationRulesPackage.ROOT__MAPPINGSDEFS:
        return basicSetMappingsdefs(null, msgs);
      case NavigationRulesPackage.ROOT__TRANSITIONDEFS:
        return basicSetTransitiondefs(null, msgs);
      case NavigationRulesPackage.ROOT__RULEDEFS:
        return basicSetRuledefs(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NavigationRulesPackage.ROOT__NAME:
        return getName();
      case NavigationRulesPackage.ROOT__MAPPINGSDEFS:
        return getMappingsdefs();
      case NavigationRulesPackage.ROOT__TRANSITIONDEFS:
        return getTransitiondefs();
      case NavigationRulesPackage.ROOT__RULEDEFS:
        return getRuledefs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NavigationRulesPackage.ROOT__NAME:
        setName((String)newValue);
        return;
      case NavigationRulesPackage.ROOT__MAPPINGSDEFS:
        setMappingsdefs((Mappings)newValue);
        return;
      case NavigationRulesPackage.ROOT__TRANSITIONDEFS:
        setTransitiondefs((TransitionDefinitions)newValue);
        return;
      case NavigationRulesPackage.ROOT__RULEDEFS:
        setRuledefs((NavigationRules)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NavigationRulesPackage.ROOT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case NavigationRulesPackage.ROOT__MAPPINGSDEFS:
        setMappingsdefs((Mappings)null);
        return;
      case NavigationRulesPackage.ROOT__TRANSITIONDEFS:
        setTransitiondefs((TransitionDefinitions)null);
        return;
      case NavigationRulesPackage.ROOT__RULEDEFS:
        setRuledefs((NavigationRules)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NavigationRulesPackage.ROOT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case NavigationRulesPackage.ROOT__MAPPINGSDEFS:
        return mappingsdefs != null;
      case NavigationRulesPackage.ROOT__TRANSITIONDEFS:
        return transitiondefs != null;
      case NavigationRulesPackage.ROOT__RULEDEFS:
        return ruledefs != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //RootImpl
