/**
 * generated by Xtext 2.19.0
 */
package navi.navigationRules.impl;

import navi.navigationRules.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class NavigationRulesFactoryImpl extends EFactoryImpl implements NavigationRulesFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static NavigationRulesFactory init()
  {
    try
    {
      NavigationRulesFactory theNavigationRulesFactory = (NavigationRulesFactory)EPackage.Registry.INSTANCE.getEFactory(NavigationRulesPackage.eNS_URI);
      if (theNavigationRulesFactory != null)
      {
        return theNavigationRulesFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new NavigationRulesFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigationRulesFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case NavigationRulesPackage.ROOT: return createRoot();
      case NavigationRulesPackage.MAPPINGS: return createMappings();
      case NavigationRulesPackage.MAPPING: return createMapping();
      case NavigationRulesPackage.MAPPING_SPEC: return createMappingSpec();
      case NavigationRulesPackage.PERMISSION_MAPPING_SPEC: return createPermissionMappingSpec();
      case NavigationRulesPackage.COORDINATE_MAPPING_SPEC: return createCoordinateMappingSpec();
      case NavigationRulesPackage.TRANSITION_DEFINITIONS: return createTransitionDefinitions();
      case NavigationRulesPackage.TRANSITION_DEFINITION: return createTransitionDefinition();
      case NavigationRulesPackage.NAVIGATION_RULES: return createNavigationRules();
      case NavigationRulesPackage.RULE: return createRule();
      case NavigationRulesPackage.DESTINATION: return createDestination();
      case NavigationRulesPackage.PERMISSION_REFERENCE: return createPermissionReference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Root createRoot()
  {
    RootImpl root = new RootImpl();
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mappings createMappings()
  {
    MappingsImpl mappings = new MappingsImpl();
    return mappings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingSpec createMappingSpec()
  {
    MappingSpecImpl mappingSpec = new MappingSpecImpl();
    return mappingSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PermissionMappingSpec createPermissionMappingSpec()
  {
    PermissionMappingSpecImpl permissionMappingSpec = new PermissionMappingSpecImpl();
    return permissionMappingSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CoordinateMappingSpec createCoordinateMappingSpec()
  {
    CoordinateMappingSpecImpl coordinateMappingSpec = new CoordinateMappingSpecImpl();
    return coordinateMappingSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransitionDefinitions createTransitionDefinitions()
  {
    TransitionDefinitionsImpl transitionDefinitions = new TransitionDefinitionsImpl();
    return transitionDefinitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransitionDefinition createTransitionDefinition()
  {
    TransitionDefinitionImpl transitionDefinition = new TransitionDefinitionImpl();
    return transitionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NavigationRules createNavigationRules()
  {
    NavigationRulesImpl navigationRules = new NavigationRulesImpl();
    return navigationRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Destination createDestination()
  {
    DestinationImpl destination = new DestinationImpl();
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PermissionReference createPermissionReference()
  {
    PermissionReferenceImpl permissionReference = new PermissionReferenceImpl();
    return permissionReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NavigationRulesPackage getNavigationRulesPackage()
  {
    return (NavigationRulesPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static NavigationRulesPackage getPackage()
  {
    return NavigationRulesPackage.eINSTANCE;
  }

} //NavigationRulesFactoryImpl
