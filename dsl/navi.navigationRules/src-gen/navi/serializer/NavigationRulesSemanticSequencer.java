/*
 * generated by Xtext 2.19.0
 */
package navi.serializer;

import com.google.inject.Inject;
import java.util.Set;
import navi.navigationRules.CoordinateMappingSpec;
import navi.navigationRules.Destination;
import navi.navigationRules.Mappings;
import navi.navigationRules.NavigationRules;
import navi.navigationRules.NavigationRulesPackage;
import navi.navigationRules.PermissionMappingSpec;
import navi.navigationRules.PermissionReference;
import navi.navigationRules.Root;
import navi.navigationRules.Rule;
import navi.navigationRules.TransitionDefinition;
import navi.navigationRules.TransitionDefinitions;
import navi.services.NavigationRulesGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class NavigationRulesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NavigationRulesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == NavigationRulesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case NavigationRulesPackage.COORDINATE_MAPPING_SPEC:
				sequence_CoordinateMappingSpec(context, (CoordinateMappingSpec) semanticObject); 
				return; 
			case NavigationRulesPackage.DESTINATION:
				sequence_Destination(context, (Destination) semanticObject); 
				return; 
			case NavigationRulesPackage.MAPPINGS:
				sequence_Mappings(context, (Mappings) semanticObject); 
				return; 
			case NavigationRulesPackage.NAVIGATION_RULES:
				sequence_NavigationRules(context, (NavigationRules) semanticObject); 
				return; 
			case NavigationRulesPackage.PERMISSION_MAPPING_SPEC:
				sequence_PermissionMappingSpec(context, (PermissionMappingSpec) semanticObject); 
				return; 
			case NavigationRulesPackage.PERMISSION_REFERENCE:
				sequence_PermissionReference(context, (PermissionReference) semanticObject); 
				return; 
			case NavigationRulesPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			case NavigationRulesPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case NavigationRulesPackage.TRANSITION_DEFINITION:
				sequence_TransitionDefinition(context, (TransitionDefinition) semanticObject); 
				return; 
			case NavigationRulesPackage.TRANSITION_DEFINITIONS:
				sequence_TransitionDefinitions(context, (TransitionDefinitions) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Mapping returns CoordinateMappingSpec
	 *     MappingSpec returns CoordinateMappingSpec
	 *     CoordinateMappingSpec returns CoordinateMappingSpec
	 *
	 * Constraint:
	 *     (name=ID controllername=STRING bundleid=STRING)
	 */
	protected void sequence_CoordinateMappingSpec(ISerializationContext context, CoordinateMappingSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.MAPPING_SPEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.MAPPING_SPEC__NAME));
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.COORDINATE_MAPPING_SPEC__CONTROLLERNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.COORDINATE_MAPPING_SPEC__CONTROLLERNAME));
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.COORDINATE_MAPPING_SPEC__BUNDLEID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.COORDINATE_MAPPING_SPEC__BUNDLEID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoordinateMappingSpecAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCoordinateMappingSpecAccess().getControllernameSTRINGTerminalRuleCall_3_0(), semanticObject.getControllername());
		feeder.accept(grammarAccess.getCoordinateMappingSpecAccess().getBundleidSTRINGTerminalRuleCall_5_0(), semanticObject.getBundleid());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Destination returns Destination
	 *
	 * Constraint:
	 *     (transition=[TransitionDefinition|ID] target=[CoordinateMappingSpec|ID] permissions+=PermissionReference*)
	 */
	protected void sequence_Destination(ISerializationContext context, Destination semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mappings returns Mappings
	 *
	 * Constraint:
	 *     mappings+=Mapping+
	 */
	protected void sequence_Mappings(ISerializationContext context, Mappings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigationRules returns NavigationRules
	 *
	 * Constraint:
	 *     rules+=Rule+
	 */
	protected void sequence_NavigationRules(ISerializationContext context, NavigationRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns PermissionMappingSpec
	 *     MappingSpec returns PermissionMappingSpec
	 *     PermissionMappingSpec returns PermissionMappingSpec
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_PermissionMappingSpec(ISerializationContext context, PermissionMappingSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.MAPPING_SPEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.MAPPING_SPEC__NAME));
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.PERMISSION_MAPPING_SPEC__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.PERMISSION_MAPPING_SPEC__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionMappingSpecAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPermissionMappingSpecAccess().getValueSTRINGTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PermissionReference returns PermissionReference
	 *
	 * Constraint:
	 *     permission=[PermissionMappingSpec|ID]
	 */
	protected void sequence_PermissionReference(ISerializationContext context, PermissionReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.PERMISSION_REFERENCE__PERMISSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.PERMISSION_REFERENCE__PERMISSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionReferenceAccess().getPermissionPermissionMappingSpecIDTerminalRuleCall_1_0_1(), semanticObject.eGet(NavigationRulesPackage.Literals.PERMISSION_REFERENCE__PERMISSION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     (name=ID mappingsdefs=Mappings transitiondefs=TransitionDefinitions ruledefs=NavigationRules)
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.ROOT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.ROOT__NAME));
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.ROOT__MAPPINGSDEFS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.ROOT__MAPPINGSDEFS));
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.ROOT__TRANSITIONDEFS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.ROOT__TRANSITIONDEFS));
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.ROOT__RULEDEFS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.ROOT__RULEDEFS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRootAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRootAccess().getMappingsdefsMappingsParserRuleCall_4_0(), semanticObject.getMappingsdefs());
		feeder.accept(grammarAccess.getRootAccess().getTransitiondefsTransitionDefinitionsParserRuleCall_5_0(), semanticObject.getTransitiondefs());
		feeder.accept(grammarAccess.getRootAccess().getRuledefsNavigationRulesParserRuleCall_6_0(), semanticObject.getRuledefs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (source=[CoordinateMappingSpec|ID] destinations+=Destination+)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionDefinition returns TransitionDefinition
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TransitionDefinition(ISerializationContext context, TransitionDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NavigationRulesPackage.Literals.TRANSITION_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavigationRulesPackage.Literals.TRANSITION_DEFINITION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionDefinitionAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionDefinitions returns TransitionDefinitions
	 *
	 * Constraint:
	 *     transitions+=TransitionDefinition+
	 */
	protected void sequence_TransitionDefinitions(ISerializationContext context, TransitionDefinitions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
